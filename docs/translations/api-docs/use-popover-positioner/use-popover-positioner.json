{
  "hookDescription": "The basic building block for creating custom popovers.",
  "parametersDescriptions": {
    "alignment": {
      "description": "The alignment of the popover element to the anchor element along its cross axis."
    },
    "alignmentOffset": {
      "description": "The offset of the popover element along its alignment axis."
    },
    "anchor": { "description": "The anchor element to which the popover popup will be placed at." },
    "arrowPadding": {
      "description": "Determines the padding between the arrow and the popover popup&#39;s edges. Useful when the popover popup has rounded corners via <code>border-radius</code>."
    },
    "collisionBoundary": {
      "description": "The boundary that the popover element should be constrained to."
    },
    "collisionPadding": { "description": "The padding of the collision boundary." },
    "container": {
      "description": "The container element to which the popover popup will be appended to."
    },
    "hideWhenDetached": {
      "description": "If <code>true</code>, the popover will be hidden if it is detached from its anchor element due to differing clipping contexts."
    },
    "keepMounted": {
      "description": "If <code>true</code>, popover stays mounted in the DOM when closed."
    },
    "mounted": { "description": "If <code>true</code>, the popover is mounted." },
    "open": { "description": "If <code>true</code>, the popover is open." },
    "positionStrategy": {
      "description": "The CSS position strategy for positioning the popover popup element."
    },
    "rootContext": { "description": "The popover root context." },
    "side": {
      "description": "The side of the anchor element that the popover element should align to."
    },
    "sideOffset": { "description": "The gap between the anchor element and the popover element." },
    "sticky": {
      "description": "If <code>true</code>, allow the popover to remain in stuck view while the anchor element is scrolled out of view."
    }
  },
  "returnValueDescriptions": {
    "alignment": { "description": "The rendered alignment of the popover element." },
    "arrowRef": { "description": "The ref of the popover arrow element." },
    "arrowUncentered": { "description": "Determines if the arrow cannot be centered." },
    "floatingContext": { "description": "<code>FloatingContext</code>" },
    "getArrowProps": { "description": "Props to spread on the popover arrow element." },
    "getPositionerProps": { "description": "Props to spread on the popover positioner element." },
    "mounted": {
      "description": "Whether the popover is mounted, including CSS transitions or animations."
    },
    "side": { "description": "The rendered side of the popover element." }
  }
}
